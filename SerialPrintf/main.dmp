
main.out:     file format elf32-littlearm
main.out
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000012e0 memsz 0x000012e0 flags r-x
    LOAD off    0x00010200 vaddr 0x40000200 paddr 0x000012e0 align 2**15
         filesz 0x00000000 memsz 0x00000000 flags rw-
    LOAD off    0x00010200 vaddr 0x40000200 paddr 0x40000200 align 2**15
         filesz 0x00000000 memsz 0x00000000 flags rw-
private flags = 0: [APCS-32] [FPA float format]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012e0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  40000200  000012e0  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  40000200  000012e0  00010200  2**0
                  ALLOC
  3 .debug_abbrev 00000319  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a33  00000000  00000000  00010519  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000032f  00000000  00000000  00010f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000003ac  00000000  00000000  0001127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000170  00000000  00000000  00011628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000e0  00000000  00000000  00011798  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000048  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY
 10 .debug_str    00000014  00000000  00000000  000118c0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 
40000200 l    d  .data	00000000 
40000200 l    d  .bss	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000004 l       *ABS*	00000000 UND_STACK_SIZE
00000004 l       *ABS*	00000000 ABT_STACK_SIZE
00000004 l       *ABS*	00000000 FIQ_STACK_SIZE
00000080 l       *ABS*	00000000 IRQ_STACK_SIZE
00000080 l       *ABS*	00000000 SVC_STACK_SIZE
00000010 l       *ABS*	00000000 MODE_USR
00000011 l       *ABS*	00000000 MODE_FIQ
00000012 l       *ABS*	00000000 MODE_IRQ
00000013 l       *ABS*	00000000 MODE_SVC
00000017 l       *ABS*	00000000 MODE_ABT
0000001b l       *ABS*	00000000 MODE_UND
0000001f l       *ABS*	00000000 MODE_SYS
00000080 l       *ABS*	00000000 I_BIT
00000040 l       *ABS*	00000000 F_BIT
00000000 l     F .text	00000000 $a
00000000 l       .text	00000000 _vectors
00000020 l       .text	00000000 Reset_Addr
00000024 l       .text	00000000 Undef_Addr
00000028 l       .text	00000000 SWI_Addr
0000002c l       .text	00000000 PAbt_Addr
00000030 l       .text	00000000 DAbt_Addr
00000038 l       .text	00000000 FIQ_Addr
00000020 l     O .text	00000000 $d
00000034 l       .text	00000000 IRQ_Addr
00000040 l     F .text	00000000 $a
000000c0 l     O .text	00000000 $d
00000000 l    df *ABS*	00000000 main.c
000000d8 l     F .text	00000000 $a
0000019c l     O .text	00000000 $d
00000000 l    df *ABS*	00000000 system.c
000001a8 l     F .text	00000000 $a
00000670 l     F .text	00000024 __get_cpsr
00000694 l     F .text	00000020 __set_cpsr
00000000 l    df *ABS*	00000000 printf.c
00000714 l     F .text	00000064 printchar
00000714 l     F .text	00000000 $a
00000778 l     F .text	00000188 prints
00000900 l     F .text	000001dc printi
00000adc l     F .text	000003f0 print
00000ec8 l     O .text	00000000 $d
00000ecc l     F .text	00000000 $a
00000000 l    df *ABS*	00000000 adc.c
00000f44 l     F .text	00000000 $a
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /srv/shared/gnuarm/gcc-build/gcc//
000010cc l     F .text	00000000 $a
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /srv/shared/gnuarm/gcc-build/gcc//
000011c4 l     F .text	00000000 $a
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /srv/shared/gnuarm/gcc-build/gcc//
00001290 l     F .text	00000000 $a
00000ecc g     F .text	00000038 printf
000006e4 g     F .text	00000030 UNDEF_Routine
000012e0 g       .text	00000000 _etext
000001f0 g     F .text	00000048 led_card_init
000010cc g     F .text	000000f8 __udivsi3
40000200 g       .bss	00000000 _bss_start
00000298 g     F .text	00000060 led_card
000006d4 g     F .text	00000010 SWI_Routine
00001008 g     F .text	000000c4 get_adc1
00000000 g       .text	00000000 _startup
40000200 g       *ABS*	00000000 _bss_end
00000040 g       .text	00000000 Reset_Handler
000006c4 g     F .text	00000010 FIQ_Routine
000011c4 g     F .text	000000cc __umodsi3
000003ec g     F .text	00000048 get_char
000001a8 g     F .text	00000048 led_board_init
000000d8 g     F .text	000000d0 main
000002f8 g     F .text	0000007c delay_ms
00001290 g     F .text	00000004 __div0
00000374 g     F .text	00000078 delay_ticks
40007edc g       *ABS*	00000000 _stack_end
000005c8 g     F .text	00000038 feed
00000f04 g     F .text	00000040 sprintf
000006b4 g     F .text	00000010 IRQ_Routine
40000200 g       .data	00000000 _data
00000600 g     F .text	00000038 enableIRQ
00000f44 g     F .text	000000c4 get_adc0
40000200 g       .data	00000000 _edata
40000200 g       *ABS*	00000000 _end
00000238 g     F .text	00000060 led_board
00000638 g     F .text	00000038 disableIRQ
0000048c g     F .text	0000013c Initialize
00000434 g     F .text	00000058 put_char


